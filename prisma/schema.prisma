generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Error {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String?
  name      String?
  stack     String?
  cause     String?
}

model LearningList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  createrId            String
  creator              Person                 @relation(fields: [createrId], references: [id], "ownedList")
  favoritedBy          Person[]               @relation("favoriteList")
  learningListMaterial LearningListMaterial[]
}

model LearningListMaterial {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int

  learningListId     String
  learningList       LearningList     @relation(fields: [learningListId], references: [id])
  learningMaterialId String
  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id])

  @@unique([order, learningListId, learningMaterialId])
}

model LearningMaterial {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  publisherName String

  completedBy          Person[]               @relation("completedMaterial")
  instructors          String[]
  links                LearningMaterialLink[]
  learningListMaterial LearningListMaterial[]

  @@unique([name, publisherName, instructors])
}

model LearningMaterialLink {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @unique

  learningMaterialId String?
  learningMaterial   LearningMaterial? @relation(fields: [learningMaterialId], references: [id])
}

model Person {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  username        String?  @unique
  profileImageUrl String?
  clerkId         String   @unique

  completedMaterial LearningMaterial[] @relation("completedMaterial")
  favoriteLists     LearningList[]     @relation("favoriteList")
  learningList      LearningList[]     @relation("ownedList")
}
